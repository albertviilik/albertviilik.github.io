{"version":3,"sources":["components/info/info.tsx","components/resume/resume.tsx","components/projects/projects.tsx","components/display/display.tsx","redux/actions.tsx","redux/actionTypes.tsx","components/dock/dock.tsx","components/app/App.tsx","serviceWorker.ts","redux/reducers/index.tsx","constants.tsx","redux/store.tsx","index.tsx"],"names":["Info","Card","className","CardActionArea","CardMedia","image","title","CardContent","List","ListItem","ListItemIcon","ListItemText","primary","Typography","secondary","Divider","Resume","Paper","src","type","Projects","Display","this","props","page","Component","connect","state","selectedPage","changePage","id","Dock","handleChange","event","newValue","onClick","BottomNavigation","value","onChange","BottomNavigationAction","label","icon","dispatch","ownProps","App","Boolean","window","location","hostname","match","combineReducers","action","replace","createStore","rootReducer","Sentry","dsn","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb573918.chunk.js","sourcesContent":["import './info.css'\n\nimport React from 'react';\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport PersonOutlineIcon from '@material-ui/icons/PersonOutline';\nimport PhoneIcon from '@material-ui/icons/Phone';\nimport EmailIcon from '@material-ui/icons/Email';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Divider from \"@material-ui/core/Divider\";\nimport List from \"@material-ui/core/List\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\n\nconst Info = () => {\n    return (\n        <Card className={'info_area span_1_of_4'}>\n            <CardActionArea>\n                <CardMedia className={'card_media'} image={'./albert.jpg'} title={'Albert Viilik'}/>\n                <CardContent>\n                    <List>\n                        <ListItem>\n                            <ListItemIcon>\n                                <PersonOutlineIcon/>\n                            </ListItemIcon>\n                            <ListItemText primary={<Typography>Albert Viilik</Typography>} secondary={null}/>\n                        </ListItem>\n                        <Divider/>\n                        <ListItem>\n                            <ListItemIcon>\n                                <PhoneIcon/>\n                            </ListItemIcon>\n                            <ListItemText primary={<Typography>+44 (0) 7585 830006</Typography>} secondary={null}/>\n                        </ListItem>\n                        <Divider/>\n                        <ListItem>\n                            <ListItemIcon>\n                                <EmailIcon/>\n                            </ListItemIcon>\n                            <ListItemText primary={<Typography>albert.viilik@gmail.com</Typography>} secondary={null}/>\n                        </ListItem>\n                        <Divider/>\n                        <ListItem>\n                            <ListItemIcon>\n                                <LocationOnIcon/>\n                            </ListItemIcon>\n                            <ListItemText primary={<Typography>Manchester, UK</Typography>} secondary={null}/>\n                        </ListItem>\n                    </List>\n                </CardContent>\n            </CardActionArea>\n        </Card>\n    );\n};\n\nexport default Info;","import './resume.css'\n\nimport React from 'react';\nimport {Paper} from \"@material-ui/core\";\n\nconst Resume = () => {\n    return (\n        <Paper className={'resume_area span_2_of_4'}>\n            <embed className={'embedded span_4_of_4'} src={'./albertviilik.pdf'} type={'application/pdf'}/>\n        </Paper>\n    );\n};\n\nexport default Resume;","import './projects.css'\n\nimport React from 'react';\nimport {Paper} from \"@material-ui/core\";\n\nconst Projects = () => {\n    return (\n        <Paper className={'projects_area span_2_of_4'}>\n            <p>Projects Page</p>\n        </Paper>\n    );\n};\n\nexport default Projects;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport './display.css'\nimport Info from \"../info/info\";\nimport Resume from \"../resume/resume\";\nimport Projects from \"../projects/projects\";\n\nfunction mapStateToProps(state: any) {\n    return {page: state.selectedPage};\n}\n\n// function mapDispatchToProps(dispatch: any) {\n//     return {};\n// }\n\nclass Display extends Component<any> {\n\n    render() {\n        return (\n            <div>\n                {this.props.page === 'Projects' ? <Projects/> : null}\n                {this.props.page === 'Info' ? <Info/> : null}\n                {this.props.page === 'Resume' ? <Resume/> : null}\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n)(Display);","import {CHANGE_PAGE} from \"./actionTypes\";\n\nexport const changePage = (id: string) => ({\n    type: CHANGE_PAGE, id\n});","export const CHANGE_PAGE = \"CHANGE_PAGE\";","import * as React from 'react';\nimport {Component} from 'react';\nimport './dock.css'\nimport {BottomNavigation} from \"@material-ui/core\";\nimport FolderIcon from \"@material-ui/icons/Folder\";\nimport PersonIcon from '@material-ui/icons/Person';\nimport SubjectIcon from '@material-ui/icons/Subject';\nimport BottomNavigationAction from \"@material-ui/core/BottomNavigationAction\";\nimport {connect} from \"react-redux\";\nimport {changePage} from \"../../redux/actions\";\n\nfunction mapStateToProps(state: any) {\n    return {page: state.selectedPage};\n}\n\nfunction mapDispatchToProps(dispatch: any, ownProps: any) {\n    return {\n        onClick: (value: any) => {\n            dispatch(changePage(value))\n        }\n    };\n}\n\nclass Dock extends Component<any> {\n    handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\n        this.props.onClick(newValue)\n    };\n\n    render() {\n        return (\n            <BottomNavigation className={\"nav span_1_of_4\"} value={this.props.page} onChange={this.handleChange}>\n                <BottomNavigationAction className={'button'} label=\"Projects\" value=\"Projects\" icon={<FolderIcon/>}/>\n                <BottomNavigationAction className={'button'} label=\"Info\" value=\"Info\" icon={<PersonIcon/>}/>\n                <BottomNavigationAction className={'button'} label=\"Resume\" value=\"Resume\" icon={<SubjectIcon/>}/>\n            </BottomNavigation>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dock)\n\n// const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\n//     store.dispatch(changePage(newValue));\n//     setValue(store.getState().selectedPage);\n//     console.log(store.getState().selectedPage + '-> dock.tsx | line:21')\n// };","import React from 'react';\nimport './App.css';\nimport Display from \"../display/display\";\nimport Dock from '../dock/dock'\n\nconst App: React.FC = () => {\n    return (\n        <div className=\"App\">\n            <Dock/>\n            <Display/>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {PAGE_NAMES} from \"../../constants\";\nimport {CHANGE_PAGE} from \"../actionTypes\";\nimport {combineReducers} from \"redux\";\n\nconst defaultState = PAGE_NAMES.INFO;\n\nconst selectedPage = (state = defaultState, action: any) => {\n    switch (action.type) {\n        case CHANGE_PAGE: {\n            return state.replace(state, action.id)\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\nexport default combineReducers({selectedPage})","export const PAGE_NAMES = {\n    PROJECTS: 'Projects',\n    INFO: 'Info',\n    RESUME: 'Resume',\n};","import {createStore} from \"redux\";\nimport rootReducer from './reducers';\n\nexport default createStore(rootReducer)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as Sentry from '@sentry/browser';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nSentry.init({dsn: \"https://a28819e74647483abc4ccac8b3082027@sentry.io/1770953\"});\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}